buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

apply plugin: 'forge'
apply plugin: 'maven-publish'

def build_number = 'CUSTOM'

if (System.getenv('BUILD_NUMBER') != null)
    build_number = System.getenv('BUILD_NUMBER')

group = package_group
archivesBaseName = mod_name
version = "${mc_version}-${mod_version}-${build_number}"

sourceSets {
    main {
        java {
            srcDir 'src/api/java'
        }
    }
}

import org.ajoberstar.grgit.Grgit

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

// Workaround for outdated Mojang URLs in ForgeGradle 1.2
// Pre-download the required client JAR and version JSON from modern hosts
// and disable the original download tasks that point to removed endpoints
def mcJarUrl = 'https://piston-data.mojang.com/v1/objects/b88808bbb3da8d9f453694b5d8f74a3396f1a533/client.jar'
def mcJsonUrl = 'https://piston-meta.mojang.com/v1/packages/095b1df74a3ffee4b53fec100abb50d40a42d950/1.21.5.json'
def mcServerUrl = 'https://piston-data.mojang.com/v1/objects/e6ec2f64e6080b9b5d9b471b291c33cc7f509733/server.jar'

gradle.afterProject { proj ->
    tasks.matching { it.name == 'downloadClient' }.all { t ->
        t.actions = []
        t.doLast {
            def dest = new File(gradle.gradleUserHomeDir,
                "caches/minecraft/net/minecraft/minecraft/${proj.mc_version}/minecraft-${proj.mc_version}.jar")
            if (!dest.exists()) {
                dest.parentFile.mkdirs()
                new URL(mcJarUrl).withInputStream { i -> dest.withOutputStream { it << i } }
            }
        }
    }
    tasks.matching { it.name == 'downloadServer' }.all { t ->
        t.actions = []
        t.doLast {
            def dest = new File(gradle.gradleUserHomeDir,
                "caches/minecraft/net/minecraft/minecraft_server/${proj.mc_version}/minecraft_server-${proj.mc_version}.jar")
            if (!dest.exists()) {
                dest.parentFile.mkdirs()
                new URL(mcServerUrl).withInputStream { i -> dest.withOutputStream { it << i } }
            }
        }
    }
    tasks.matching { it.name == 'getVersionJson' }.all { t ->
        t.actions = []
        t.doLast {
            def dest = new File(gradle.gradleUserHomeDir,
                "caches/minecraft/versionJsons/${proj.mc_version}.json")
            if (!dest.exists()) {
                dest.parentFile.mkdirs()
                new URL(mcJsonUrl).withInputStream { i -> dest.withOutputStream { it << i } }
            }
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
        // Waila API is bundled locally to avoid external maven dependency
        compileOnly files('src/api/java')
    compile fileTree(dir: 'libs', include: '*.jar')
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace "@VERSION@", project.version
    replaceIn "Reference.java"

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

jar {
    classifier = ''
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash
    )
}

// Source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// Deobfuscated jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.build.dependsOn sourceJar, javadocJar, deobfJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
    task.sourceCompatibility = '1.8'
    task.targetCompatibility = '1.8'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            artifact deobfJar
        }
    }
    repositories {
        if (project.hasProperty('maven_repo')) {
            maven { url maven_repo }
        } else {
            mavenLocal()
        }
    }
}
